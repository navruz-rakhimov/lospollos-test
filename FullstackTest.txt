# Общие сведения

Требуется разработать веб-приложение на базе .NET 6 или .NET 8. В качестве средства создания интерактивности а стороне браузера можно использовать Vue.JS или аналогичную библиотеку. В качестве СУБД можно использовать MS SQL Server или Azure SQL Edge.

Целью веб-приложения является симуляция входа пользователей в систему и их работы в защищенном разделе системы.

Для этого каждый пользователь снабжается т. н. _признаком активности._ Пользоваться защищенным разделом могут только пользователи с признаком активности, имеющим значение `true`.

## Страница для авторизованных пользователей

В приложении должна быть страница со статическим текстом:

> Welcome, **[username]**! This page is for authenticated users only.

Страница должна быть доступна по адресу `/welcome`. В качестве значения в блок **[username]** подставляется текущее имя пользователя. Данная страница доступна при выполнении _обоих_ условий:

1. Пользователь заранее и успешно выполнил вход в систему.
1. Признак активности пользователя имеет значение `true` в момент запроса страницы.

Если хотя бы одно из вышеперечисленных условий не выполнено, происходит перенаправление (HTTP Redirect) на форму входа.

## Форма входа

Форма входа должна быть доступна по адресу: `/login` и содержать следующие элементы:

> Username: **[Text]**\
> Password: **[Secured Text]**\
> **[Submit]**

При нажатии на кнопку **[Submit]** система проверяет введенные данные на предмет правильности сочетания имени и пароля, а также признака активности пользователя.

Если вход выполнен успешно, происходит перенаправление (HTTP Redirect) на страницу `/welcome`.

Если сочетание имени и пароля не соответствует тому, что ожидает система ИЛИ если признак активности пользователя имеет значение `false`:

* Cодержимое поля **Username** сохраняется.
* Cодержимое поля **Password** очищается.
* В верхней части формы показывается сообщение об ошибке:

   > We could not log you in. Please check your username/password and try again.

В целях упрощения задания не требуется изощренных схем проверки пароля. Кандидат может применить любую схему, в том числе и ту, где единственный правильный пароль — это строка __"password"__.

## Страница администрирования пользователей

В составе приложения должна быть страница администрирования пользователей, доступная по адресу `/users`. В целях упрощения задания, попасть на данную старинцу можно без необходимости производить вход в систему.

Страница должна отображать заранее сформированный (см. ниже) список из имеющихся в базе пользователей:

| Username    |    Active    |
| :---        |    :----:    |
| someuser1   |     Yes      |
| someuser2   |     No       |
| ...         |     ...      |

При щелчке по имени пользователя появляется выпадающая панель с возможностью изменить его признак активности, например, с помощью следующих элементов:

> Username: **Static text**\
> Active: **[Checkbox]**\
> **[OK]**

При нажатии на кнопку **[OK]** панель скрывается. Если признак активности пользователя был изменен путем нажатия на галочку **Active**, то должен происходить один из следующих сценариев (на усмотрение кандидата):

1. На уровне пользовательского интерфейса происходит добавление сведений об измененном пользователе в очередь (batch). В верхней части страницы (над списком пользователей) появляется панель со следующими элементами:\
    
    > One or more users have been modified. **[Save]**
    
    При нажатии на кнопку **[Save]** панель скрывается, и происходит отправка всей очереди на сервер, где для каждого пользователя в составе очереди сохраняется его измененный признак активности.
    
1. Помимо исчезновения выпадающей панели  происходит немедленное обновление признака активности редактируемого пользователя.

Вне зависимости от выбранного сценария, если для пользователя происходит смена признака активности на значение `false`, последующий запрос этого пользователя к системе должен привести к перенаправлению (HTTP Redirect) на форму входа — даже если он заранее до этого выполнил вход и успешно обращался к странице `/welcome`.

Большим плюсом будет решение на уровне бэкэнда, разработанное из соображений масштабируемости и снижения нагрузки на базу данных:

* в систему может одновременно выполнить вход огромное количество (например, миллионы) пользователей;
* большинство пользователей являются активными; лишь для небольшой части пользователей происходит смена признака активности на значение `false`.

## Хранение пользователей в базе

Требуется разработать структуру таблиц, способную хранить сведения о пользователях и их статусе активности. Требуется написать SQL-скрипт, выполняющий предварительное население базы сведениями о нескольких десятках пользователей. Требуется написать процедуры или скрипты (на усмотрение кандидата) для доступа к списку пользователей.